#!/usr/bin/env python3

import argparse
import os

from p2ptrans.interfaces import *

def readRule(l):
    rule = dict()
    key = None
    fileA = []
    for symbol in l:
        if symbol.isdigit():
            key = symbol
        elif key is not None:
            if key in rule:
                rule[key].add(symbol)
            else:
                rule[key] = {symbol}
        else:
            fileA.append(symbol)
    try:
        planeA = eval(fileA.pop())
    except SyntaxError:
        planeA = None
        
    if type(planeA) is not list or len(fileA) == 0 or len(rule) == 0:
        raise ValueError("-B and -T should be of the form: FILE_1 FILE_2 ... [h,k,l] 1 ELEMENT_1 ELEMENT_2 ... 2 ELEMENT_3 ELEMENT_4 ... 3 ...")

    return fileA, planeA, rule

def readOptions():

    parser = argparse.ArgumentParser()
    parser.add_argument("-B","--bottom", nargs='+', type=str, dest="A", default=['./POSCAR_A','[0,0,1]','1','Si'], help="Structure at the bottom, miller indices and chemistry rule. Ex: POSCAR_A [0,0,1] 1 Si")
    parser.add_argument("-T","--top", nargs='+', type=str, dest="B", default=['./POSCAR_B','[1,1,0]','1','Si'], help="Structure at the top, miller indices and chemistry rule. Ex: POSCAR_B [1,1,0] 1 Si")
    parser.add_argument("-n","--ncell",dest="ncell",type=int, default=100, help="Number of cells to tile")
    parser.add_argument("-N","--niter",dest="n_iter",type=int, default=1000, help="Number of random starts")
    parser.add_argument("-i","--interactive",dest="interactive",action="store_true", default=False, help="Enables interactive display")
    parser.add_argument("-d","--disp",dest="savedisplay",action="store_true", default=False, help="Saves figures")
    parser.add_argument("-p","--param", dest="filename", type=str, default='./p2p.in', help="Parameter file")
    parser.add_argument("-o","--outdir",dest="outdir", type=str, default='.', help="Output directory")
    parser.add_argument("-u","--use",dest="use", type=str, default=None, help="Use previously calculated data")
    parser.add_argument("-m","--minimize",dest="minimize",action="store_true", default=False, help="Force new optimization even if data is available")
    parser.add_argument("-t","--test",dest="test",action="store_true", default=False, help="Tests the input file and prepares the run, you can continue this run with the -u [directory] -r option")
    parser.add_argument("-b","--surface-only",dest="surface",action="store_true", default=False, help="Only uses the first termination from the bottom")
    parser.add_argument("-s","--sym",dest="sym",type=int, default=1, help="Max rotational symmetry of the two phases")
    parser.add_argument("-l","--layers", dest="layers", type=int, default=1, help="Number of layers in the interface structure")
    parser.add_argument("-v","--vacuum", dest="vacuum", type=float, default=10, help="Thickness of vaccum")
    parser.add_argument("-w","--width", dest="width", type=float, default=None, help="Maximum width of corregated surface to optimize")

    options = parser.parse_args()
    fileA, planeA, ruleA = readRule(options.A)
    fileB, planeB, ruleB = readRule(options.B)
    ncell = options.ncell
    filename = options.filename
    savedisplay = options.savedisplay
    interactive = options.interactive
    if options.use == None:
        use = False
        outdir = options.outdir
    else:
        use = True
        outdir = options.use
    minimize = options.minimize
    test = options.test
    n_iter = options.n_iter
    sym = options.sym
    vacuum = options.vacuum
    layers = options.layers
    surface = options.surface
    max_thickness = options.width
            
    return fileA, fileB, planeA, planeB, ruleA, ruleB, ncell, n_iter, filename, interactive, savedisplay, outdir, use, minimize, test, sym, vacuum, layers, surface, max_thickness

def main(fileA, fileB, planeA, planeB, ruleA, ruleB,
         ncell=100, n_iter=1000, filename='./p2p.in', interactive=False, savedisplay=False, outdir='.', # os.getcwd()?
         use=None, minimize=False, test=False, sym=1, vacuum=10, layers=1, surface=False, max_thickness=None):
    
    if (use == None) or (use == False):
        use = False
    else:
        outdir = use
        use = True
    
    # START
    print(r" ________    _______  ________   ")   
    print(r"|\   __  \  /  ___  \|\   __  \  ")
    print(r"\ \  \|\  \/__/|_/  /\ \  \|\  \ ")
    print(r" \ \   ____\__|//  / /\ \   ____\ ")
    print(r"  \ \  \___|   /  /_/__\ \  \___|")
    print(r"   \ \__\     |\________\ \__\   ")
    print(r"    \|__|      \|_______|\|__|   ")
    print()
    print("____________INTERFACES_____________")
    print()

    # If reusing a result load the info
    if use:
        
        listA, planeA, listB, planeB, ncell, n_iter, filecontent, ruleA, ruleB  = pickle.load(open(outdir+"/param.dat","rb"))

        print("==>Using information from %s<=="%(outdir))
        print()
        print("The inputs for that run were:")
        print("-----------------------------------")
        print("Plane bottom:", planeA)
        print("Plane top:", planeB)
        print("Chemistry rule bottom:", ruleA)
        print("Chemistry rule top:", ruleB)
        print("File bottom:", listA[0])
        print("File top:", listB[0])
        print("ncell:", ncell)
        print("n_iter:", n_iter)
        print("Param file (at time of running):")
        for l in filecontent:
            print(l.rstrip())
        print("-----------------------------------")
        print()

    else:

        print("Chemistry rule bottom:", ruleA)
        print("Chemistry rule top:", ruleB)
        
        # Set up the output directory
        if not os.path.exists(outdir):
            os.makedirs(outdir)

        if surface:
            top, bottom = "top", "bottom"
        else:
            top, bottom = None, None

        listA = []
        print("Bottom structure file(s):")
        for poscarfile in fileA:
            print(poscarfile)
            listA.append((poscarfile, readSurface(read.poscar(poscarfile), planeA,
                                                  ruleA, surface=bottom, max_thickness=max_thickness)))
        print("Number of A structures:", len(listA))
        
        listB = []
        print("Top structure file(s):")
        for poscarfile in fileB:
            print(poscarfile)
            listB.append((poscarfile, readSurface(read.poscar(poscarfile), planeB,
                                                  ruleB, surface=top, max_thickness=max_thickness)))
        print("Number of B structures:", len(listB))
            
        try:
            with open(filename, "r") as f:
                filecontent = f.readlines()
        except FileNotFoundError:
            filecontent = ""

        # Save the parameters for the use function
        pickle.dump((listA, planeA, listB, planeB,  ncell, n_iter, filecontent, ruleA, ruleB), open(outdir+"/param.dat","wb"))

    dists = []
    filedists = []
    for nameA, termsA in listA:
        for nameB, termsB in listB:
            nameA = nameA.rsplit(".",1)[0].rsplit("/",1)[-1]
            nameB = nameB.rsplit(".",1)[0].rsplit("/",1)[-1]
            file_outdir = outdir + "/%s-%s"%(nameA, nameB)
            os.makedirs(file_outdir, exist_ok=True)
            for k, (A, mapA) in enumerate(termsA):
                for l, (B, mapB) in enumerate(termsB):
                    term_outdir = file_outdir + "/term_%03d-%03d"%(k,l)
                    os.makedirs(term_outdir, exist_ok=True)
                    ttrans, dispStruc, vec_classes, dmin = findMatchingInterfaces(A, B, ncell, n_iter,
                                                                                  sym=sym, filename=filename,
                                                                                  interactive=interactive,
                                                                                  savedisplay=savedisplay,
                                                                                  outdir=term_outdir,
                                                                                  minimize=minimize, test=test)
                    dists.append(dmin)
                    filedists.append(term_outdir)
                    
                    if test:
                        continue
                    
                    for k in range(len(dispStruc)):

                        if dispStruc[k] is None:
                            continue
                        
                        peak_outdir = term_outdir + "/peak_%03d"%k
                        os.makedirs(peak_outdir, exist_ok=True)
                        
                        for i, reconstructureA in enumerate(mapA):
                            for j, reconstructureB in  enumerate(mapB):
                                
                                print("Creating POSCARS for peak %d, bottom term. %d, top term %d"%(k, i, j))
                    
                                var_outdir = peak_outdir + "/var_%03d-%03d"%(i,j)
                                os.makedirs(var_outdir, exist_ok=True)                        
                                
                                createPoscar(A, B, reconstructureA, reconstructureB, ttrans[k,:,:],
                                             dispStruc[k], outdir=var_outdir,
                                             layers=layers, vacuum=vacuum, tol=tol)

    if not test:
        with open(outdir + "/out.txt", "w") as f:
            for i in np.argsort(dists):
                print("%14.10e in %s"%(dists[i], filedists[i]), file=f)
    else:
        print("Test run completed, rerun with: p2pint -u %s -m"%outdir)
        print()
                
    print("p2pint finished successfully")

if __name__ == "__main__":
    main(*readOptions())

